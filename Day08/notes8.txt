Library creation in C

1.static lib – archive of objects
create a .o file with gcc -c
create a library form that .o file(s) with ar -rcs librandlib.a randoms.o
use the library with gcc main.c -o program -L . -l randlib
-L is for the path of the library
-l is for the name of the library

2.shared libray
create an .o file with gcc -c -fPIC randoms.c -o drandoms.o
create an .so file with gcc -shared -o libdrandlib.so drandoms.o
compile it with gcc main.c -o program -L. -l drandlib
environment variable – echo $LD_LIBRARY_PATH – if it s empty that means that it is not set by default
which means that we should do the following: export LD_LIBRARY_PATH =`pwd` or $(pwd)
//TODO check how to set an environment variable that does not expire when the terminal is closed – edit the .bash file

Task1:make the functions void setBit(uint32_t* mask, int bit); clearBit(--//--); flipBit(--//--); int checkBit(uint32_t mask, int bit) in a file called bitmasks.c which should be made in 2 libraries → static and dynamic. Make 2 .exe files called sprogram and dprogram. Main file should be called test.c.


Build system – make 
How is make used? Usually in the directory that our program is stored there is a “Makefile” . Makefile stores the instructions to build a project/program.
Target: dep
	actions:
target: dep
	actions:
and so on... (dependencies are optional)
dependencies are files that we need to have in order for the actions below to be executed
Krnel.org
$@ means target name
$< means the first dependency 
$^ means all dependencies

Function pointers
rettype(*fpname)(par types)

E.D. → C; OS: Linux/Unix;compiling process; hardware; AVR; PIC; x86-64; ARM; Electronics; 
